#!/sbin/sh
# APK-Patcher: Recovery Flashable Zip
# by djb77 @ xda-developers
# Based on APK-Patcher by osm0sis @ xda-developers
#
# APK-Patcher Lite (v1.0) Changelog:
#
# - Initial transformation to Lite vesrion, based on the APK
#   Patching method used for TGP ROM.
# - Removed Baksmali / Smail / Apktool support, instead it will 
#   now copy pre-compiled files (xml, dex etc) to the APK file.
# - New script added to remove unwanted files from the APK,
#   a sample is located at script/<APKName>.sh. 
#   Please rename the .sh to the APK name you want to work on.
#
# APK-Patcher (v2.0) Changelog:
#
# - Baksmali / Smail / Apktool support is back. You can use
#   script/<APKName>-smali.sh and/or script/<APKName>-res.sh
#   to make changes to the decompiled files.
@ - Added System-As-Root checks.
# - Added API Level and Debug Info settings to envvar.sh file.
#

OUTFD=/proc/self/fd/$2;
ZIP="$3";
test "$ANDROID_ROOT" || ANDROID_ROOT=/system;

ui_print() { echo -e "ui_print $1\nui_print" > $OUTFD; }
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }
abort() { ui_print " "; ui_print "$*"; exit 1; }
setup_mountpoint() {
	test -L $1 && $bb mv -f $1 ${1}_link;
	if [ ! -d $1 ]; then
		rm -f $1;
		mkdir $1;
	fi;
}
is_mounted() { $bb mount | $bb grep -q " $1 "; }
umount_all() {
	($bb umount /system;
	$bb umount -l /system;
	if [ -e /system_root ]; then
		$bb umount /system_root;
		$bb umount -l /system_root;
	fi;
	umount /vendor;
	umount -l /vendor;
	if [ "$umount_data" ]; then
		$bb umount /data;
		$bb umount -l /data;
	fi) 2>/dev/null;
}
restore_env() {
	test "$savedpath" && export LD_LIBRARY_PATH="$savedpath";
	test "$savedpre" && export LD_PRELOAD="$savedpre";
	umount_all;
	($bb mv -f /system_link /system;
	$bb mv -f /system_root_link /system_root) 2>/dev/null;
}

##########################################################################################
# APK-PATCHER ENVIRONMENT SETUP
##########################################################################################
ap=/tmp/apkpatcher;
bin=$ap/tools;
patch=$ap/patch;
script=$ap/script;
framework=0;

baksmali() {
ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=/system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/baksmali.jar org.jf.baksmali.main d -a $apilevel --debug-info $debuginfo $1 -o classout;
test $? != 0 && abort "Decompiling APK classes failed. Aborting...";
}
smali() {
ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=/system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/smali.jar org.jf.smali.main a -a $apilevel classout -o classes.dex;
test $? != 0 && abort "Rebuilding APK classes failed. Aborting...";
}
apktool_f() {
if [ "$framework" == 0 ]; then
	ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=//system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/apktool.jar brut.apktool.Main install-framework -p $ap/framework /system/framework/framework-res.apk
	ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=//system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/apktool.jar brut.apktool.Main install-framework -p $ap/framework /system/priv-app/SystemUI/SystemUI.apk
	test $? != 0 && abort "Loading framework failed. Aborting...";
	framework=1
fi;
}
apktool_d() {
ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=//system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/apktool.jar brut.apktool.Main d -api $apilevel -p $ap/framework -s $1 -o resout;
test $? != 0 && abort "Decoding APK resources failed. Aborting...";
}
apktool_b() {
ANDROID_DATA=$ap ANDROID_ROOT=/system LD_LIBRARY_PATH=/system:/vendor dalvikvm -Xbootclasspath:/system/framework/core-oj.jar:/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/apache-xml.jar -classpath $bin/apktool.jar brut.apktool.Main b -api $apilevel-p $ap/framework -a $bin/aapt -c -o $1 resout;
test $? != 0 && abort "Rebuilding APK resources failed. Aborting...";
}

##########################################################################################
# START OF APK-PATCHER
##########################################################################################
show_progress 1.34 0;
mkdir -p $ap;
unzip -o "$ZIP" -d $ap;
if [ $? != 0 -o -z "$(ls $ap)" ]; then
	abort "Unzip failed. Aborting...";
fi;

# SET UP FILES / DIRECTORIES
# --------------------------
chmod -R 755 $bin $script $ap/*.sh;

# IMPORT VARIABLES
# ----------------
. $ap/envvar.sh;

ui_print " ";
ui_print "$banner";
ui_print " ";
ui_print "APK-Patcher by djb77 @ xda-developers";
ui_print " ";
set_progress 0.1;
progress=10;

# SYSTEM-AS-ROOT CHECKS
# ---------------------
umount_all;
setup_mountpoint $ANDROID_ROOT;
if ! is_mounted $ANDROID_ROOT; then
	$bb mount -o ro -t auto $ANDROID_ROOT;
fi;
case $ANDROID_ROOT in
	/system_root) setup_mountpoint /system;;
	/system)
		if [ -f /system/system/build.prop ]; then
			setup_mountpoint /system_root;
			$bb mount --move /system /system_root;
			if [ $? != 0 ]; then
				$bb umount /system;
				$bb umount -l /system 2>/dev/null;
				$bb mount -o ro -t auto /dev/block/bootdevice/by-name/system /system_root;
			fi;
		fi;
	;;
esac;
if is_mounted /system_root; then
	$bb mount -o bind /system_root/system /system;
fi;
$bb mount -o ro -t auto /vendor 2>/dev/null;
if ! is_mounted /data; then
	$bb mount /data;
	umount_data=1;
fi;

savedpath="$LD_LIBRARY_PATH";
savedpre="$LD_PRELOAD";
unset LD_LIBRARY_PATH;
unset LD_PRELOAD;

# PATCH FILES
# -----------
ui_print "Patching Files...";
cd $ap;
amount=$((100 / `echo $apklist | wc -w`));
subamt=$(awk -v num=$amount 'BEGIN { print num / 10}');
for target in $apklist; do
	ui_print " ";
	ui_print "- $target";
	apkname=$(basename $target .apk);

# COPY THE TARGET FILE
# --------------------
	sysfile=`find /system -mindepth 2 -name $target`;
	cp -fp $sysfile $ap;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# MAKE A BACKUP
# -------------
	if [ "$backup" == 1 ]; then
		ui_print "	Backup APK";
		mkdir -p $apkbak;
		cp -fp $sysfile $apkbak;
	fi;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# RENAME APK TO ZIP
# -----------------
	if [ -d $patch/$apkname ]; then
		mv $apkname.apk $apkname.zip;

# DELETE UNWANTED FILES
# ---------------------
		if [ -f $script/$apkname.sh ]; then
			ui_print "	Remove files";
			. $script/$apkname.sh;
			for remove in $fileremove; do
				$bin/zip -d $apkname.zip $remove;
			done
		fi;

# INJECT COMPILED RESOURCE FILES
# ------------------------------
		ui_print "	Inject files";
		cd $patch/$apkname;
		$bin/zip -r -9 $ap/$apkname.zip *;
		cd $ap;
		mv $apkname.zip $apkname.apk;
	fi;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# SMALI PATCHES
# -------------
	if [ -f $script/$apkname-smali.sh -o -d $patch/$apkname-smali ]; then
		baksmali $target;
		if [ -f $script/$apkname-smali.sh ]; then
			. $script/$apkname-smali.sh;
		fi;
		if [ -d $patch/$apkname-smali ]; then
			cp -rf $patch/$apkname-smali/* classout/;
		fi;
		smali;
		$bin/zip -r -9 $ap/$apkname.zip $ap/classes.dex;
	fi;
	progress=$((progress + 3 * subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# RESOURCE PATCHES
# ----------------
	if [ -f $script/$apkname-res.sh -o -d $patch/$apkname-res ]; then
		apktool_f
		apktool_d $target;
		if [ -f $script/$apkname-res.sh ]; then
			. $script/$apkname-res.sh;
		fi;
		if [ -d $patch/$apkname-res ]; then
			cp -rf $patch/$apkname-res/* resout/;
		fi;
	apktool_b $target;
	fi;
	progress=$((progress + 3 * subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# ADD CLASSES.DEX FILES
# ---------------------
	if [ -f $ap/classes.dex ]; then
		$bin/zip -r -9 $ap/$apkname.zip $ap/classes.dex;
	fi;
	progress=$((progress + 3 * subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# ZIPALIGN FILE
# -------------
	ui_print "	Zipaligning APK";
	cp -f $target $apkname-preopt.apk;
	rm $target;
	$bin/zipalign -p 4 $apkname-preopt.apk $target;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');
 
# COPY PATCHED FILE
# -----------------
	ui_print "	Copy APK to system";
	mount -o rw,remount -t auto /system;
	cp -fp $ap/$target $sysfile;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

# WORK AREA CLEANUP
# -----------------
	if [ "$cleanup" == 1 ]; then
		ui_print "	Clean up work area";
		rm -rf $target $apkname-preopt.apk;
	fi;
	progress=$((progress + subamt));
	set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');
done;

# EXTRA COMMANDS
# --------------
ui_print " ";
ui_print "Run extra commands";
. $ap/extracmd.sh;
set_progress 1.2;
	
# FINAL CLEANUP
# -------------
if [ "$cleanup" == 1 ]; then
	ui_print "Cleaning up...";
	ui_print " ";
	cd /tmp;
	rm -rf $ap;
fi;

# FINISH
# ------
restore_env;
set_progress 1.34;
ui_print "Done!";
exit 0;

