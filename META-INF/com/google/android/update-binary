#!/sbin/sh
# APK-Patcher Lite: Recovery Flashable Zip
# by djb77 @ xda-developers
# Based on APK-Patcher by osm0sis @ xda-developers
#
# APK-Patcher Lite Changelog:
#
# - Initial transformation to Lite vesrion, based on the APK
#   Patching method used for TGP ROM.
# - Removed Baksmali / Smail / Apktool support, instead it will 
#   now copy pre-compiled files (xml, dex etc) to the APK file.
# - New script added to remove unwanted files from the APK,
#   a sample is located at scripts/apkname.sh. 
#   Please rename the .sh to the APK name you want to work on.

OUTFD=/proc/self/fd/$2;
ZIP="$3";
test "$ANDROID_ROOT" || ANDROID_ROOT=/system;

ui_print() { echo -e "ui_print $1\nui_print" > $OUTFD; }
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }
abort() { ui_print " "; ui_print "$*"; exit 1; }
setup_mountpoint() {
  test -L $1 && $bb mv -f $1 ${1}_link;
  if [ ! -d $1 ]; then
    rm -f $1;
    mkdir $1;
  fi;
}
is_mounted() { $bb mount | $bb grep -q " $1 "; }
umount_all() {
  ($bb umount /system;
  $bb umount -l /system;
  if [ -e /system_root ]; then
    $bb umount /system_root;
    $bb umount -l /system_root;
  fi;
  umount /vendor;
  umount -l /vendor;
  if [ "$umount_data" ]; then
    $bb umount /data;
    $bb umount -l /data;
  fi) 2>/dev/null;
}
restore_env() {
  test "$savedpath" && export LD_LIBRARY_PATH="$savedpath";
  test "$savedpre" && export LD_PRELOAD="$savedpre";
  umount_all;
  ($bb mv -f /system_link /system;
  $bb mv -f /system_root_link /system_root) 2>/dev/null;
}

# working directory variables
ap=/tmp/apkpatcher;
bin=$ap/tools;
patch=$ap/patch;
script=$ap/script;

show_progress 1.34 0;
mkdir -p $ap;
unzip -o "$ZIP" -d $ap;
if [ $? != 0 -o -z "$(ls $ap)" ]; then
  abort "Unzip failed. Aborting...";
fi;

# set up extracted files and directories
chmod -R 755 $bin $script $ap/*.sh;

# import variables
. $ap/envvar.sh;

ui_print " ";
ui_print "$banner";
ui_print " ";
ui_print "APK-Patcher Lite by djb77 @ xda-developers";
ui_print " ";
mount /system;
mount /data;
set_progress 0.1;
progress=10;

  # System-As-Root check
umount_all;
setup_mountpoint $ANDROID_ROOT;
if ! is_mounted $ANDROID_ROOT; then
  $bb mount -o ro -t auto $ANDROID_ROOT;
fi;
case $ANDROID_ROOT in
  /system_root) setup_mountpoint /system;;
  /system)
    if [ -f /system/system/build.prop ]; then
      setup_mountpoint /system_root;
      $bb mount --move /system /system_root;
      if [ $? != 0 ]; then
        $bb umount /system;
        $bb umount -l /system 2>/dev/null;
        $bb mount -o ro -t auto /dev/block/bootdevice/by-name/system /system_root;
      fi;
    fi;
  ;;
esac;
if is_mounted /system_root; then
  $bb mount -o bind /system_root/system /system;
fi;
$bb mount -o ro -t auto /vendor 2>/dev/null;
if ! is_mounted /data; then
  $bb mount /data;
  umount_data=1;
fi;

savedpath="$LD_LIBRARY_PATH";
savedpre="$LD_PRELOAD";
unset LD_LIBRARY_PATH;
unset LD_PRELOAD;

ui_print "Patching Files...";
cd $ap;
amount=$((100 / `echo $apklist | wc -w`));
subamt=$(awk -v num=$amount 'BEGIN { print num / 10}');
for target in $apklist; do
  ui_print " ";
  ui_print "- $target";
  apkname=$(basename $target .apk);

  # copy in target system file to patch
  sysfile=`find /system -mindepth 2 -name $target`;
  cp -fp $sysfile $ap;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

  # make a backup if set
  if [ "$backup" == 1 ]; then
    ui_print "  Backup APK";
    mkdir -p $apkbak;
    cp -fp $sysfile $apkbak;
  fi;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

  # file patches
  if [ -d $patch/$apkname ]; then
    mv $apkname.apk $apkname.zip;

  # delete unwanted files
    if [ -f $script/$apkname.sh ]; then
      ui_print "  Remove files";
      . $script/$apkname.sh;
      for remove in $fileremove; do
        $bin/zip -d $apkname.zip $remove;
      done
    fi;

  # continue patching
    ui_print "  Inject files";
    cd $patch/$apkname;
    $bin/zip -r -9 $ap/$apkname.zip *;
    if [ -f resources.arsc ]; then
      $bin/zip -r -0 $ap/$apkname.zip resources.arsc;
    fi;
    cd $ap;
    mv $apkname.zip $apkname.apk;
  fi;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

  # zipalign updated file
  ui_print "  Zipaligning APK";
  cp -f $target $apkname-preopt.apk;
  rm $target;
  $bin/zipalign -p 4 $apkname-preopt.apk $target;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');
 
  # copy patched file back to /system
  ui_print "  Copy APK to system";
  mount -o rw,remount -t auto /system;
  cp -fp $ap/$target $sysfile;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');

  # remove temp files if cleanup is set
  if [ "$cleanup" == 1 ]; then
    ui_print "  Clean up work area";
    rm -rf $target $apkname-preopt.apk;
  fi;
  progress=$((progress + subamt));
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}');
done;

# extra required non-patch changes
ui_print " ";
ui_print "Run extra commands";
. $ap/extracmd.sh;
set_progress 1.2;

# cleanup as necessary
if [ "$cleanup" == 1 ]; then
  ui_print "Cleaning up...";
  ui_print " ";
  cd /tmp;
  rm -rf $ap;
fi;

restore_env;
set_progress 1.34;
ui_print "Done!";
exit 0;

